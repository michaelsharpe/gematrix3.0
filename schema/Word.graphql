type Word {
  id: ObjID!
  entry: String!
  numeral: Numeral!
  notebooks(lastCreatedAt: Float, limit: Int): [Notebook]
  user: User
  letters(lastCreatedAt: Float, limit: Int): [Letter]
  language: String
  pronunciation: String!
  definition: String!
  notes(lastCreatedAt: Float, limit: Int): [Note]
  see: [String]
  createdAt: Float!
  updatedAt: Float!
}

extend type Query {
  words(lastCreatedAt: Float, limit: Int): [Word!]
  word(id: ObjID!): Word
}

input CreateWordInput {
  entry: String!
  numeralId: ObjID!
  userId: ObjID
  language: String
  pronunciation: String!
  definition: String!
}

input UpdateWordInput {
  entry: String!
  numeralId: ObjID!
  userId: ObjID
  language: String
  pronunciation: String!
  definition: String!
}

extend type Mutation {
  createWord(input: CreateWordInput!): Word
  updateWord(id: ObjID!, input: UpdateWordInput!): Word
  removeWord(id: ObjID!): Boolean
}

extend type Subscription {
  wordCreated: Word
  wordUpdated: Word
  wordRemoved: ObjID
}
